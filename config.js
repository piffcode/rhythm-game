// config.js - Single source of truth for all configuration

export const config = {
    // Spotify App Configuration
    CLIENT_ID: 'your_spotify_client_id_here',
    REDIRECT_URI: window.location.origin + '/auth.html',
    
    // Feature Flags
    USE_WORKER: false,
    DEMO_MODE: false,
    
    // Locked tracks for consistent gameplay
    LOCKED_TRACK_IDS: [
        '5FMyXeZ0reYloRTiCkPprT',  // Track 1
        '0YWmeJtd7Fp1tH3978qUIH'   // Track 2
    ],
    
    // Required Spotify scopes (exact string as specified)
    SCOPES: 'user-read-private user-read-email user-read-playback-state user-modify-playback-state streaming playlist-modify-private playlist-modify-public user-library-modify',
    
    // Gameplay Constants
    DIFFICULTY_SETTINGS: {
        EASY: {
            lanes: 4,
            approachTime: 1700,
            baseSpeed: 0.8
        },
        NORMAL: {
            lanes: 4,
            approachTime: 1500,
            baseSpeed: 1.0
        },
        HARD: {
            lanes: 5,
            approachTime: 1300,
            baseSpeed: 1.2
        }
    },
    
    // Timing Windows (in milliseconds)
    TIMING_WINDOWS: {
        PERFECT: 45,    // ±45ms
        GREAT: 90,      // ±90ms
        GOOD: 135       // ±135ms
        // Anything outside GOOD range is a MISS
    },
    
    // Score Values
    SCORING: {
        PERFECT: 300,
        GREAT: 200,
        GOOD: 100,
        MISS: 0,
        COMBO_MULTIPLIER_MAX: 4,
        COMBO_THRESHOLD: 10
    },
    
    // Health System
    HEALTH: {
        STARTING: 100,
        PERFECT_GAIN: 2,
        GREAT_GAIN: 1,
        GOOD_NEUTRAL: 0,
        MISS_LOSS: 5,
        MIN_HEALTH: 0,
        MAX_HEALTH: 100
    },
    
    // Pass Requirements
    PASS_THRESHOLD: {
        MIN: 85,    // Minimum 85% completion required
        MAX: 100    // Random range: 85-100%
    },
    
    // Performance Settings
    PERFORMANCE: {
        TARGET_FPS: 60,
        MAX_NOTES_ON_SCREEN: 50,
        POSITION_SMOOTHING: 0.1,
        SEEK_THRESHOLD: 800 // ms - when to force seek if position drifts
    },
    
    // Device Detection
    DEVICE_POLLING: {
        INTERVAL: 3000,     // 3 seconds
        MAX_ATTEMPTS: 40,   // 120 seconds total
        RETRY_DELAY: 1000
    },
    
    // Token Management
    TOKEN: {
        REFRESH_BUFFER: 300000, // 5 minutes before expiry
        RETRY_ATTEMPTS: 3,
        RETRY_DELAY: 1000
    },
    
    // Chart Generation
    CHART: {
        MIN_NOTE_SPACING: 100,      // Minimum ms between notes
        HOLD_MIN_DURATION: 1200,    // Minimum duration for hold notes
        DENSITY_MULTIPLIERS: {
            EASY: 0.6,
            NORMAL: 0.8,
            HARD: 1.0
        },
        ENERGY_THRESHOLD: 0.6,      // Above this, increase note density
        LOUDNESS_THRESHOLD: -10     // dB, above this, increase note density
    },
    
    // Mobile Optimization
    MOBILE: {
        FULLSCREEN_ON_START: true,
        LOCK_ORIENTATION: 'portrait',
        WAKE_LOCK: true,
        PREVENT_SCROLL: true,
        TOUCH_BUFFER: 20 // px buffer around touch targets
    },
    
    // Visual Settings
    VISUALS: {
        LANE_COLORS: [
            '#ff0080',  // Pink
            '#0080ff',  // Blue  
            '#80ff00',  // Green
            '#ff8000',  // Orange
            '#8000ff'   // Purple (5th lane for Hard mode)
        ],
        NOTE_COLORS: {
            NORMAL: '#ffffff',
            HOLD: '#ffff00',
            APPROACHING: '#cccccc'
        },
        HIT_EFFECTS: {
            PERFECT: '#00ff00',
            GREAT: '#ffff00',
            GOOD: '#ff8000',
            MISS: '#ff0000'
        },
        HIGHWAY_LENGTH: 0.8, // Percentage of screen height
        RECEPTOR_SIZE: 60,    // px
        NOTE_SIZE: 50        // px
    },
    
    // Audio Settings
    AUDIO: {
        LATENCY_CALIBRATION_RANGE: 200, // ±200ms calibration range
        DEFAULT_CALIBRATION: 0,
        VOLUME_FADE_TIME: 500, // ms for fade in/out
        POSITION_UPDATE_RATE: 50 // ms between position updates
    },
    
    // Playlist Generation
    PLAYLIST: {
        ADJECTIVES: [
            'Neon', 'Cosmic', 'Electric', 'Sonic', 'Digital', 
            'Vibrant', 'Mystic', 'Stellar', 'Dynamic', 'Radiant',
            'Crystal', 'Quantum', 'Turbo', 'Ultra', 'Mega',
            'Hyper', 'Super', 'Epic', 'Prime', 'Elite'
        ],
        NOUNS: [
            'Beats', 'Pulse', 'Groove', 'Flow', 'Wave', 
            'Storm', 'Rush', 'Blaze', 'Spark', 'Echo',
            'Rhythm', 'Tempo', 'Vibe', 'Sound', 'Track',
            'Mix', 'Drop', 'Bass', 'Sync', 'Mode'
        ],
        DESCRIPTION_TEMPLATE: 'Generated by RHYTHM rhythm game'
    },
    
    // Error Messages
    ERRORS: {
        NO_PREMIUM: 'Spotify Premium required to play.',
        NO_DEVICE: 'No active device found. Open Spotify, start any song, return here, then press Start.',
        CONTROLS_LOCKED: 'Playback controls are locked during a session.',
        AUTH_FAILED: 'Authentication failed. Please try again.',
        SESSION_EXPIRED: 'Session expired. Please log in again.',
        NETWORK_ERROR: 'Network error. Please check your connection.',
        PLAYBACK_ERROR: 'Playback error. Please try again.',
        INVALID_SESSION: 'Invalid session. Please start over.'
    },
    
    // Debug Settings (only for development)
    DEBUG: {
        ENABLED: false,
        LOG_TIMING: false,
        LOG_INPUT: false,
        LOG_CHART: false,
        SHOW_FPS: false,
        SHOW_HITBOXES: false
    }
};

// Validation function to check if required config is set
export function validateConfig() {
    const errors = [];
    
    if (!config.CLIENT_ID || config.CLIENT_ID === 'your_spotify_client_id_here') {
        errors.push('CLIENT_ID must be set to your Spotify application client ID');
    }
    
    if (config.LOCKED_TRACK_IDS.length !== 2) {
        errors.push('LOCKED_TRACK_IDS must contain exactly 2 track IDs');
    }
    
    if (!config.REDIRECT_URI) {
        errors.push('REDIRECT_URI must be configured');
    }
    
    return errors;
}

// Helper function to get difficulty settings
export function getDifficultySettings(difficulty = 'NORMAL') {
    return config.DIFFICULTY_SETTINGS[difficulty] || config.DIFFICULTY_SETTINGS.NORMAL;
}

// Helper function to calculate score with combo
export function calculateScore(hitType, combo) {
    const baseScore = config.SCORING[hitType] || 0;
    const comboMultiplier = Math.min(
        1 + Math.floor(combo / config.SCORING.COMBO_THRESHOLD) * 0.1,
        config.SCORING.COMBO_MULTIPLIER_MAX
    );
    return Math.floor(baseScore * comboMultiplier);
}

// Helper function to get random pass threshold
export function getRandomPassThreshold() {
    const min = config.PASS_THRESHOLD.MIN;
    const max = config.PASS_THRESHOLD.MAX;
    return min + Math.floor(Math.random() * (max - min + 1));
}

// Helper function to generate completion code
export function generateCompletionCode(userId, sessionNonce) {
    const today = new Date();
    const dateStr = today.getFullYear() + 
                   String(today.getMonth() + 1).padStart(2, '0') + 
                   String(today.getDate()).padStart(2, '0');
    
    // Simple hash function for demo purposes
    const hashInput = userId + sessionNonce + dateStr;
    let hash = 0;
    for (let i = 0; i < hashInput.length; i++) {
        const char = hashInput.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32-bit integer
    }
    
    const hashStr = Math.abs(hash).toString(36).toUpperCase().substring(0, 8);
    return `RHYTHM-${dateStr}-${hashStr}`;
}

// Export default for convenience
export default config;